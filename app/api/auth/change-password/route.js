import { dbConnect } from '../../../../lib/mongodb'; import User from '../../../../models/User'; import bcrypt from 'bcryptjs'; import { NextResponse } from 'next/server'; import { getUserFromCookie, signJwt } from '../../../../lib/jwt'; export async function POST(req){ await dbConnect(); const me = getUserFromCookie(); if(!me) return NextResponse.json({ error:'unauthorized' }, { status:401 }); const { oldPassword,newPassword } = await req.json(); const user = await User.findById(me.id); if(!user) return NextResponse.json({ error:'not found' }, { status:404 }); const ok = await bcrypt.compare(oldPassword, user.passwordHash); if(!ok) return NextResponse.json({ error:'old password incorrect' }, { status:400 }); const hash = await bcrypt.hash(newPassword, 10); user.passwordHash = hash; user.mustChangePassword = false; await user.save(); const token = signJwt({ id:user._id.toString(), role:user.role, username:user.username, mustChangePassword:false }); const res = NextResponse.json({ ok:true }); res.cookies.set('session', token, { httpOnly:true, secure: process.env.FORCE_HTTPS === 'true', sameSite:'lax', path:'/' }); return res; }